Todays Agenda!!
================
-Control statements(If condition)
-Breakout+Break
-ForLoop
-Breakout
-Method & Object
 
 
 



Operators:
operators are special symbols that perform specific operations
 
1.Arithmetic operators:
These operators are used to perform mathematical operations
such as addition, subtraction, multiplication,and division.
+ (addition) 2+3=5
- (subtraction)5-4=1
* (multiplication)5*2=10
/ (division)-Que 10/5=2
% (modulus or remainder)10%5=0

2.Assignment operators:
These operators are used to assign values to variables. 
= (assignment) a=5 ,comName="TestLeaf"

age=23;

+= (add and assign) ag=23
ag+=6 => ag=ag+6=>23+6=29
 
-= (subtract and assign) a-=5=> a=a-5 +> a=5-5=0
*= (multiply and assign)
/= (divide and assign)
%= (modulus and assign)



3.Comparison operators:
These operators are used to compare two value
and return a boolean value (true or false). 
== (equal to) 5==5=>true
!= (not equal to)5!=8 =>true
> (greater than) 6>5 =>true
< (less than) 6<5 =>false
>= (greater than or equal to) 6>=7
<= (less than or equal to)





4.Logical operators:
These operators are used to combine two or more boolean expressions
and return a boolean value.   &&-->AND * 
&& (logical and)  both condition should passed
AND----->&&
1*0=0     T F F
0*1=0     F T F
0*0=0     F F F
1*1=1     T T T

a=5,b=5
true && false
(a==b)&&(a>b) =both data=false
True && False= Flase
(5==5)&&(5<5)---false

|| (logical or) any one condition can pass

false||true=>true
(a==b)||(a>b) 
a=5,b=3

addition
OR------>||
1+0=1    T F T
0+1=1    F T T
1+1=1    T T T
0+0=0    F F F


(5==5)||(5<5)---True

! (logical not or negation)
1---0   T F

0---1   F  T


5. unary operator
Increment operator (i++) i=0 ,i=0+1 => i=1
Decrement operator (i--) i=5, i=5-1 => i=4














Conditional Statements:
Conditional statements are used to control the flow of the program based on certain conditions. These statements allow the program to make decisions and execute different blocks of code depending on whether a specified condition evaluates to true or false. The primary conditional statements in Java include:
1. if Statement:
Definition: The if statement is used to execute a block of code only if a specified condition is true.

Syntax:

if (condition) {
    // Code to be executed if the condition is true
}
int age=17
if(age>18){
syso("vote");
}

2. if-else Statement:
Definition: The if-else statement is used to execute one block of code if the condition is true and 
another block of code if the condition is false.

Syntax:

if (condition) {
    // Code to be executed if the condition is true
} else {
    // Code to be executed if the condition is false
}

Ex:
int age=17;
if(age>=18){  
  syso("vote")
}else{
  syso("i cannot vote")
}



output as:vote




3. if else-if else Statement:
Definition: The if-else if-else statement allows you to check multiple conditions in sequence. 
It executes the first block of code whose condition is true.

Syntax:

if (condition1)  {
    // Code to be executed if condition1 is true
}else if (condition2) {
    // Code to be executed if condition2 is true
} 
else if (condition 3){
      // Code to be executed if condition3 is true

  }else {
    // Code to be executed if none of the conditions is true
}

int mark =46;
if(mark>80){
syso("A");
}
else if(mark>60){
syso("B");
}
else if(mark>50){
syso("C");
}
else{
syso("D");
}






int mark=-0;

if(mark>=35){//it will go this if block check is failed then only it will go to else-if 
  syso("pass")
}else if(mark<35){
  syso("fail")
}else{
  syso("absent")
}

nested if:
it will check all the if condition ,if any one condition is failed its goto else block
int mark=45;
if(mark>35){
  if(mark>25){
  syso("pass")
    else{
syso("fail")
    }
  }
}





int mark 45;
if(m<20)
syso("C")
else if(m<40)
syso("B")
else if(m<50)
syso("A")
else
syso("O")


if(condition){
if(condition){
if(condtion{




If_Else:

int mark =60



if(mark>60){
  System.out.println("pass");
}
else if(mark>50){
  System.out.println("pass with above 50")
}
else{
  System.out.println("fail");
}

ClassRoom:

int age=20;
if(above 18)- eligible for voting
else- not eligible for voting
 
 
 
 
Looping Statements:

for Statement: The for loop in Java is used to iterate over a range of values or to 
repeat a block of code a certain number of times. It consists of three parts: 
initialization, condition, and iteration expression. The loop continues as long as the condition is true.

Example:

for(initialization;condition;iteration){

}
i++ -> post increment => i+1
++i -> pre increment
                
for (int i = 0; i <5; i++) {
   
   syso(i)
   
   0;0<5;0+1 => i=1
   syso(0)
   1;1<5;1+1 => i=2
   syso(1)
   ....
   
   5;5<5=false => loop stop
}




Jump Statements:

break Statement: The break statement is used to exit a loop prematurely. When encountered inside a loop,
 it immediately terminates the loop, and the control is transferred to the statement following the loop.

 for (int i = 0; i < 10; i++) {
  //0,1,2,3,4,5
    if (i == 5) {
        break; // Exits the loop when i is 5
    }
    // Code inside the loop
}


continue Statement: The continue statement is used to skip the rest of the code inside a loop for 
the current iteration and move on to the next iteration.

for (int i = 0; i < 10; i++) {
    if (i == 5) {
        continue; // Skips the rest of the code for i=5 and continues with the next iteration
    }
    // Code inside the loop
}
//0,1,2,3,4,6,7,8,9


Method:

*A method in Java is a collection of statements that perform a specific task. Methods are defined 
within classes and are used to organize code, make it reusable, and promote modular programming.

*A method typically consists of a method signature, which includes the method name, return type,
 and parameter list, and a method body, which contains the code to be executed when the method is called.

Return Type: Specifies the type of data the method will return, or "void" if it doesn't return anything.
 Parameters: Input values passed to the method for processing.

//normal method
public void data(){
}

//main method
public  static void main(String[] args){

}

public -Accessmodifier 
static - common reference
void -return type
main -method name
String[] agrs- input arguments


Accesmodifier,returntype,methodName,input arguments


Normal method:

Accesmodifier returntype methodname(input arguments){
    
}

public void leaftaps(){
}

Example:
public class MyClass {
    // Method definition -> UPI
    public void printMessage() {
       syso("hello");
    }

    // Method with parameters and return type -> Cash 
    public int addNumbers(int a, int b) {
        return a + b;
    }

    public String name(String value){
        return value;
    }
}




 Object:

An object in Java is an instance of a class. A class is a blueprint or a template that defines the 
structure and behavior of objects. Objects are created based on these class definitions.
variables ,methods

Objects have attributes (fields or properties) and behaviors (methods). The attributes represent
 the state of the object, and the methods define the actions or operations that the object can perform.

syntax:
step 1:
ClassName objectName=new ClassName();

step 2:

objectName.methodName();


